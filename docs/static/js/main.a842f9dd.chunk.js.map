{"version":3,"sources":["App.tsx","index.tsx"],"names":["DragAndDropCalendar","withDragAndDrop","BigCalendar","App","state","events","selected","undefined","localizer","momentLocalizer","moment","components","eventWrapper","BoundEventWrapperComponent","Object","assertThisInitialized","_this","onCalendarSelectSlot","slotInfo","setState","concat","toConsumableArray","start","end","react_default","a","createElement","className","this","defaultView","selectable","onSelectSlot","onEventDrop","console","log","onEventResize","resizable","React","Component","app","_React$Component2","EventWrapperComponent","_getPrototypeOf3","_this2","classCallCheck","_len3","arguments","length","args","Array","_key3","possibleConstructorReturn","getPrototypeOf","call","apply","onEventDivMouseOver","_event","props","event","inherits","createClass","key","value","stockEventWrapper","Children","only","children","oldEventDiv","newEventDiv","cloneElement","onMouseOver","ReactDOM","render","App_App","document","getElementById"],"mappings":"gSAOMA,QAAsBC,GAAgBC,KASvBC,6MACHC,MAAkB,CAChCC,OAAQ,GACRC,cAAUC,KAGKC,UAAYN,IAAYO,gBAAgBC,OAExCC,WAAa,CAC5BC,aAAcC,EAA2BC,OAAAC,EAAA,EAAAD,CAAAE,OAuB1BC,qBAAuB,SAACC,GACvCF,EAAKG,SAAS,SAAAf,GAAK,MAAK,CAAEC,OAAM,GAAAe,OAAAN,OAAAO,EAAA,EAAAP,CAAMV,EAAMC,QAAZ,CAAoB,CAAEiB,MAAOJ,EAASI,MAAOC,IAAKL,EAASK,mFApB3F,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uEACAF,EAAAC,EAAAC,cAAC1B,EAAD,CACEQ,UAAWoB,KAAKpB,UAChBG,WAAYiB,KAAKjB,WACjBN,OAAQuB,KAAKxB,MAAMC,OACnBwB,YAAY,OACZC,YAAU,EACVC,aAAcH,KAAKX,qBACnBX,SAAUsB,KAAKxB,MAAME,SACrB0B,YAAaC,QAAQC,IACrBC,cAAeF,QAAQC,IACvBE,WAAS,YA1BcC,IAAMC,WAqCvC,SAASzB,EAA2B0B,GAClC,gBAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAAc,KAAAa,GAAA,QAAAI,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAP,EAAA7B,OAAAqC,EAAA,EAAArC,CAAAc,MAAAc,EAAA5B,OAAAsC,EAAA,EAAAtC,CAAA2B,IAAAY,KAAAC,MAAAZ,EAAA,CAAAd,MAAAR,OAAA4B,MAQmBO,oBAA+D,SAAAC,GAC9EjB,EAAIpB,SAAS,CAAEb,SAAUqC,EAAKc,MAAMC,SATxCf,EAAA,OAAA7B,OAAA6C,EAAA,EAAA7C,CAAA2B,EAAAD,GAAA1B,OAAA8C,EAAA,EAAA9C,CAAA2B,EAAA,EAAAoB,IAAA,SAAAC,MAAA,WAEI,IAAMC,EAAoB1B,IAAM2B,SAASC,KAAKrC,KAAK6B,MAAMS,UACnDC,EAAc9B,IAAM2B,SAASC,KAAKF,EAAkBN,MAAMS,UAC1DE,EAAc/B,IAAMgC,aAAaF,EAAa,CAAEG,YAAa1C,KAAK2B,sBACxE,OAAOlB,IAAMgC,aAAaN,EAAmB,CAAEG,SAAUE,QAL7D3B,EAAA,CAA2CJ,IAAMC,WClDnDiC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.a842f9dd.chunk.js","sourcesContent":["import React from 'react';\nimport BigCalendar, { stringOrDate, EventWrapperProps } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\n\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\n\ntype AppProps = {};\n\ntype AppState = {\n  events: any[];\n  selected: any;\n};\n\nexport default class App extends React.Component<AppProps, AppState> {\n  public readonly state: AppState = {\n    events: [],\n    selected: undefined,\n  };\n\n  private readonly localizer = BigCalendar.momentLocalizer(moment);\n\n  private readonly components = {\n    eventWrapper: BoundEventWrapperComponent(this),\n  };\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <style>{`.rbc-addons-dnd-resize-ns-icon { zoom: 5 !important; }`}</style>\n        <DragAndDropCalendar\n          localizer={this.localizer}\n          components={this.components}\n          events={this.state.events}\n          defaultView=\"week\"\n          selectable\n          onSelectSlot={this.onCalendarSelectSlot}\n          selected={this.state.selected}\n          onEventDrop={console.log}\n          onEventResize={console.log}\n          resizable\n        />\n      </div>\n    );\n  }\n\n  private readonly onCalendarSelectSlot = (slotInfo: { start: stringOrDate, end: stringOrDate }) => {\n    this.setState(state => ({ events: [...state.events, { start: slotInfo.start, end: slotInfo.end }] }))\n  };\n}\n\nfunction BoundEventWrapperComponent(app: App) {\n  return class EventWrapperComponent extends React.Component<EventWrapperProps, never> {\n    public render() {\n      const stockEventWrapper = React.Children.only(this.props.children) as React.ReactElement;\n      const oldEventDiv = React.Children.only(stockEventWrapper.props.children) as React.ReactElement;\n      const newEventDiv = React.cloneElement(oldEventDiv, { onMouseOver: this.onEventDivMouseOver });\n      return React.cloneElement(stockEventWrapper, { children: newEventDiv });\n    }\n  \n    private readonly onEventDivMouseOver: React.MouseEventHandler<HTMLDivElement> = _event => {\n      app.setState({ selected: this.props.event });\n    };\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}